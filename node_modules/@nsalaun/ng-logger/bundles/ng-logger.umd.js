/**
 * @license Noémi Salaün v2.0.0
 * (c) 2017 Noémi Salaün https://github.com/noemi-salaun/ng-logger
 * License: MIT
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.logger = global.ng.logger || {}),global.ng.core));
}(this, (function (exports,_angular_core) { 'use strict';

/**
 * @license
 * Copyright Noémi Salaün All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/noemi-salaun/ng-logger/blob/master/LICENSE
 */
/**
 * Created by Noémi Salaün on 09/17/2016.
 */
/**
 * The available log levels.
 */
/**
 * @license
 * Copyright Noémi Salaün All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/noemi-salaun/ng-logger/blob/master/LICENSE
 */ 
(function (Level) {
    Level[Level["OFF"] = 0] = "OFF";
    Level[Level["ERROR"] = 1] = "ERROR";
    Level[Level["WARN"] = 2] = "WARN";
    Level[Level["INFO"] = 3] = "INFO";
    Level[Level["DEBUG"] = 4] = "DEBUG";
    Level[Level["LOG"] = 5] = "LOG";
})(exports.Level || (exports.Level = {}));

/**
 * @license
 * Copyright Noémi Salaün All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/noemi-salaun/ng-logger/blob/master/LICENSE
 */
/**
 * Created by Noémi Salaün on 09/17/2016.
 */
/**
 * The token to provide the log {@link Level}.
 */
var LOGGER_LEVEL = new _angular_core.OpaqueToken('LoggerLevel');
/**
 * A logger service that provide the same functions as {@link console}.
 * The logger is binded to the console, so the Web Console shows the correct file and line number of the original call.
 */
var Logger = (function () {
    function Logger(level) {
        this._level = level;
        // console.log
        if (this._level >= exports.Level.LOG && console && console.log) {
            this.log = console.log.bind(console);
        }
        else {
            this.log = function () {
            };
        }
        // console.debug
        if (this._level >= exports.Level.DEBUG && console && console.debug) {
            this.debug = console.debug.bind(console);
        }
        else {
            this.debug = function () {
            };
        }
        // console.info
        if (this._level >= exports.Level.INFO && console && console.info) {
            this.info = console.info.bind(console);
        }
        else {
            this.info = function () {
            };
        }
        // console.warn
        if (this._level >= exports.Level.WARN && console && console.warn) {
            this.warn = console.warn.bind(console);
        }
        else {
            this.warn = function () {
            };
        }
        // console.error
        if (this._level >= exports.Level.ERROR && console && console.error) {
            this.error = console.error.bind(console);
        }
        else {
            this.error = function () {
            };
        }
        // console.group
        if (this._level > exports.Level.OFF && console && console.group) {
            this.group = console.group.bind(console);
        }
        else {
            this.group = function () {
            };
        }
        // console.groupCollapsed
        if (this._level > exports.Level.OFF && console && console.groupCollapsed) {
            this.groupCollapsed = console.groupCollapsed.bind(console);
        }
        else {
            this.groupCollapsed = function () {
            };
        }
        // console.groupEnd
        if (this._level > exports.Level.OFF && console && console.groupEnd) {
            this.groupEnd = console.groupEnd.bind(console);
        }
        else {
            this.groupEnd = function () {
            };
        }
        // console.time
        if (this._level >= exports.Level.DEBUG && console && console.time) {
            this.time = console.time.bind(console);
        }
        else {
            this.time = function () {
            };
        }
        // console.timeEnd
        if (this._level >= exports.Level.DEBUG && console && console.timeEnd) {
            this.timeEnd = console.timeEnd.bind(console);
        }
        else {
            this.timeEnd = function () {
            };
        }
    }
    Object.defineProperty(Logger.prototype, "level", {
        /**
         * Returns the log level.
         */
        get: function () {
            return this._level;
        },
        enumerable: true,
        configurable: true
    });
    return Logger;
}());
Logger.decorators = [
    { type: _angular_core.Injectable },
];
/** @nocollapse */
Logger.ctorParameters = function () { return [
    { type: exports.Level, decorators: [{ type: _angular_core.Inject, args: [LOGGER_LEVEL,] },] },
]; };

/**
 * @license
 * Copyright Noémi Salaün All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/noemi-salaun/ng-logger/blob/master/LICENSE
 */
/**
 * Created by Noémi Salaün on 09/17/2016.
 */
var NgLoggerModule = (function () {
    function NgLoggerModule() {
    }
    /**
     * Provide the {@link Logger} with the given log {@link Level}.
     * @param level The log level.
     */
    NgLoggerModule.forRoot = function (level) {
        if (level === void 0) { level = exports.Level.LOG; }
        return {
            ngModule: NgLoggerModule,
            providers: [
                Logger,
                { provide: LOGGER_LEVEL, useValue: level }
            ]
        };
    };
    return NgLoggerModule;
}());
NgLoggerModule.decorators = [
    { type: _angular_core.NgModule },
];
/** @nocollapse */
NgLoggerModule.ctorParameters = function () { return []; };

/**
 * @license
 * Copyright Noémi Salaün All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/noemi-salaun/ng-logger/blob/master/LICENSE
 */
/**
 * Created by Noémi Salaün on 10/11/2016.
 */

/**
 * @license
 * Copyright Noémi Salaün All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/noemi-salaun/ng-logger/blob/master/LICENSE
 */
/**
 * Created by Noémi Salaün on 17/09/2016.
 */

exports.NgLoggerModule = NgLoggerModule;
exports.Logger = Logger;
exports.LOGGER_LEVEL = LOGGER_LEVEL;

Object.defineProperty(exports, '__esModule', { value: true });

})));
