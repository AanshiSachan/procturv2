/**
 * @license
 * Copyright Noémi Salaün All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/noemi-salaun/ng-logger/blob/master/LICENSE
 */
import { Injectable, OpaqueToken, Inject } from "@angular/core";
import { Level } from "./level.enum";
/**
 * Created by Noémi Salaün on 09/17/2016.
 */
/**
 * The token to provide the log {@link Level}.
 */
export var LOGGER_LEVEL = new OpaqueToken('LoggerLevel');
/**
 * A logger service that provide the same functions as {@link console}.
 * The logger is binded to the console, so the Web Console shows the correct file and line number of the original call.
 */
var Logger = (function () {
    function Logger(level) {
        this._level = level;
        // console.log
        if (this._level >= Level.LOG && console && console.log) {
            this.log = console.log.bind(console);
        }
        else {
            this.log = function () {
            };
        }
        // console.debug
        if (this._level >= Level.DEBUG && console && console.debug) {
            this.debug = console.debug.bind(console);
        }
        else {
            this.debug = function () {
            };
        }
        // console.info
        if (this._level >= Level.INFO && console && console.info) {
            this.info = console.info.bind(console);
        }
        else {
            this.info = function () {
            };
        }
        // console.warn
        if (this._level >= Level.WARN && console && console.warn) {
            this.warn = console.warn.bind(console);
        }
        else {
            this.warn = function () {
            };
        }
        // console.error
        if (this._level >= Level.ERROR && console && console.error) {
            this.error = console.error.bind(console);
        }
        else {
            this.error = function () {
            };
        }
        // console.group
        if (this._level > Level.OFF && console && console.group) {
            this.group = console.group.bind(console);
        }
        else {
            this.group = function () {
            };
        }
        // console.groupCollapsed
        if (this._level > Level.OFF && console && console.groupCollapsed) {
            this.groupCollapsed = console.groupCollapsed.bind(console);
        }
        else {
            this.groupCollapsed = function () {
            };
        }
        // console.groupEnd
        if (this._level > Level.OFF && console && console.groupEnd) {
            this.groupEnd = console.groupEnd.bind(console);
        }
        else {
            this.groupEnd = function () {
            };
        }
        // console.time
        if (this._level >= Level.DEBUG && console && console.time) {
            this.time = console.time.bind(console);
        }
        else {
            this.time = function () {
            };
        }
        // console.timeEnd
        if (this._level >= Level.DEBUG && console && console.timeEnd) {
            this.timeEnd = console.timeEnd.bind(console);
        }
        else {
            this.timeEnd = function () {
            };
        }
    }
    Object.defineProperty(Logger.prototype, "level", {
        /**
         * Returns the log level.
         */
        get: function () {
            return this._level;
        },
        enumerable: true,
        configurable: true
    });
    return Logger;
}());
export { Logger };
Logger.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Logger.ctorParameters = function () { return [
    { type: Level, decorators: [{ type: Inject, args: [LOGGER_LEVEL,] },] },
]; };
//# sourceMappingURL=logger.service.js.map